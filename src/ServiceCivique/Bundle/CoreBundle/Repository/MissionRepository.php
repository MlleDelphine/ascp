<?php

namespace ServiceCivique\Bundle\CoreBundle\Repository;

use Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository;
use ServiceCivique\Bundle\CoreBundle\Entity\Mission;
use ServiceCivique\Bundle\CoreBundle\Entity\Organization;
use Doctrine\ORM\QueryBuilder;
use Pagerfanta\Adapter\DoctrineORMAdapter;
use Pagerfanta\Pagerfanta;

/**
 * MissionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MissionRepository extends EntityRepository
{

    /**
     * create a new mission from organization object
     *
     * @param  Organization $organization
     * @return Mission      $mission
     */
    public function createNewFromOrganization(Organization $organization)
    {
        $mission = $this->createNew();
        $mission->setOrganization($organization);
        $mission->setApprovalNumber($organization->getApprovalNumber());
        $mission->setPhoneNumber($organization->getPhoneNumber());
        $mission->setDepartment($organization->getDepartment());
        $mission->setArea($organization->getArea());
        $mission->setZipCode($organization->getZipCode());
        $mission->setCountry($organization->getCountry());
        $mission->setAddress($organization->getAddress());
        $mission->setContact($organization->getUser()->getFullName());
        $mission->setCity($organization->getCity());
        $mission->setOrganizationName($organization->getName());
        $mission->setWebsite($organization->getWebsite());
        $mission->setOrganizationDescription($organization->getDescription());

        return $mission;
    }

    /**
     * createIsAvailableQueryBuilder
     * @param  string                     $alias
     * @return \Doctrine\ORM\QueryBuilder $queryBuilder
     */
    public function createIsAvailableQueryBuilder($alias)
    {
        return $this->createQueryBuilder($alias)
            ->where($alias . '.archived = :archived')
            ->setParameter('archived', false);
    }

    /**
     * findOneWithOrganizationAndCategoryBy
     *
     * @param array $criteria
     */
    public function findOneWithOrganizationAndCategoryBy(array $criteria)
    {
        $queryBuilder = $this->getQueryBuilder();

        $this->applyCriteria($queryBuilder, $criteria);

        return $queryBuilder
            ->innerJoin('o.taxon', 'taxon')
            ->innerJoin('o.organization', 'organization')
            ->addSelect('taxon')
            ->addSelect('organization')
            ->andWhere('o.archived = 0')
            ->getQuery()
            ->getOneOrNullResult();
    }

    /**
     * findToBeArchived
     *
     * @param \DateTime $datetime
     * @param Integer   $limit
     */
    public function findToBeArchived(\DateTime $datetime, $limit)
    {
        $queryBuilder = $this->createQueryBuilder('m');

        $queryBuilder
            ->andWhere('m.updated < :date_offset')
            ->andWhere('m.archived = 0')
            ->setParameter('date_offset', $datetime->format('Y-m-d'));

        return $queryBuilder
            ->orderBy('m.updated', 'ASC')
            ->setMaxResults($limit)
            ->getQuery()
            ->getResult();
    }

    public function findRecommended($regionCode = null, $currentMissionId = null, $limit = 3, $isOverseas = false)
    {
        $queryBuilder = $this->createQueryBuilder('m')
            ->innerJoin('m.taxon', 'taxon')
            ->innerJoin('m.organization', 'organization');

        if (!$isOverseas && $regionCode) {
            $queryBuilder
                ->andWhere('m.area = :area')
                ->setParameter('area', $regionCode);
        }

        if ($isOverseas) {
            $queryBuilder
                ->andWhere('m.isOverseas = :isOverseas')
                ->setParameter('isOverseas', 1);
        }

        $query = $queryBuilder
            ->andWhere('m.startDate >= :now_date')
            ->setParameter('now_date', date('Y-m-d'))
            ->andWhere('m.status = :status_available')
            ->setParameter('status_available', Mission::STATUS_AVAILABLE)
            ->orderBy('m.startDate', 'ASC')
            ->setMaxResults($limit + 1)
            ->getQuery();

        $result = $query
            ->useResultCache(true, 3600, sprintf('recommanded_%s_%s', $regionCode, $isOverseas))
            ->getResult();

        // exclude current mission
        if ($currentMissionId) {
            $result = array_filter($result, function ($mission) use ($currentMissionId) {
                return $mission->getId() != $currentMissionId;
            });
        }

        return array_slice($result, 0, $limit);
    }

    public function getPaginator(QueryBuilder $queryBuilder)
    {
        return new Pagerfanta(new DoctrineORMAdapter($queryBuilder, false));
    }

    /**
     * createPaginatorWithOrganizationAndCategory
     *
     * @param array $criteria
     * @param array $orderBy
     */
    public function createPaginatorWithOrganizationAndCategory(array $criteria = null, array $orderBy = null)
    {
        $queryBuilder = $this->getCollectionQueryBuilder()
            ->innerJoin('o.taxon', 'taxon')
            ->innerJoin('o.organization', 'organization')
            ->addSelect('taxon')
            ->addSelect('organization');

        $this->applyCriteria($queryBuilder, $criteria);
        $this->applySorting($queryBuilder, $orderBy);

        return $this->getPaginator($queryBuilder);
    }

    public function getAllCount()
    {
        return $this->createQueryBuilder('m')
            ->select('COUNT(m)')
            ->getQuery()->getSingleScalarResult();
    }

    public function getAllWithBatch($offset = 0, $max = 100)
    {
        $queryBuilder = $this->createQueryBuilder('m');

        $queryBuilder
            ->setMaxResults($max)
            ->setFirstResult($offset)
        ;

        return $queryBuilder
            ->getQuery()
            ->getResult()
        ;
    }
}
