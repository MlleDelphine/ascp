<?php

namespace ServiceCivique\Bundle\CoreBundle\Repository;

use Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository;
use ServiceCivique\Bundle\UserBundle\Entity\User;
use ServiceCivique\Bundle\CoreBundle\Entity\Application;
use Doctrine\ORM\Query\ResultSetMapping;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{

    public function getActiveSubscribingUsers()
    {
        $dateTime = new \DateTime('-1 day');

        return $this->getQueryBuilder()
            ->andWhere('o.created > :date_offset')
            ->setParameter('date_offset', $dateTime->format('Y-m-d'))
            ->andWhere('o.archived = 0')
            ->andWhere('o.enabled = 1')
            ->andWhere('o.isNewsletterSubscribed = 1')
            ->getQuery()
            ->getResult();
    }

    public function findByType($criteria, array $orderBy = null)
    {
        if ($criteria['type'] == 'organisme') {
            $qb =  $this->createOrganizationsUserQueryBuilder($criteria);
        } else {
            $qb = $this->createJeuneUserQueryBuilder($criteria);
        }

        $this->applySorting($qb, $orderBy);

        return $this->getPaginator($qb);
    }

    protected function createJeuneUserQueryBuilder($criteria)
    {
        $qb = $this->createUserQueryBuilder('user');

        $this->applyCriteria($qb, [
            'type' => [
                User::MISSION_SEEKER_TYPE,
                User::VOLUNTEER_TYPE,
                User::FORMER_VOLUNTEER_TYPE
            ]
        ]);

        if (isset($criteria['query'])) {
            $qb
                ->andWhere($qb->expr()->orX(
                    $qb->expr()->like($this->getAlias() . '.email', ':query'),
                    $qb->expr()->like($this->getAlias() . '.firstname', ':query'),
                    $qb->expr()->like($this->getAlias() . '.lastname', ':query')
                ))
                ->setParameter(':query', '%' . $criteria['query'] . '%')
            ;
        }

        return $qb;
    }

    protected function createOrganizationsUserQueryBuilder($criteria)
    {
        $qb = $this->createUserQueryBuilder('organization');

        $qb
            ->join($this->getAlias() . '.organization', 'org')
            ->leftJoin('org.invitation', 'invit')
        ;

        $this->applyCriteria($qb, ['type' => User::ORGANIZATION_TYPE]);

        if (isset($criteria['query'])) {
            $qb
                ->andWhere($qb->expr()->orX(
                    $qb->expr()->like($this->getAlias() . '.email', ':query'),
                    $qb->expr()->like($this->getAlias() . '.firstname', ':query'),
                    $qb->expr()->like($this->getAlias() . '.lastname', ':query'),
                    $qb->expr()->like('org.approvalNumber', ':query'),
                    $qb->expr()->like('org.name', ':query')
                ))
                ->setParameter(':query', '%' . $criteria['query'] . '%')
            ;
        }

        return $qb;
    }

    protected function createUserQueryBuilder($type)
    {
        $qb = $this->getEntityManager()
            ->createQueryBuilder()
            ->select($this->getAlias(). '.id', $this->getAlias(). '.firstname', $this->getAlias(). '.lastname', $this->getAlias(). '.created', $this->getAlias(). '.lastLogin', $this->getAlias(). '.enabled', $this->getAlias(). '.email', $this->getAlias(). '.locked')
        ;
        if ($type == 'organization') {
            $qb->addSelect('org.name as organizationName', 'org.type as organizationType', 'invit.id as invitationId', 'invit.used_at as invitationUsedAt');
        }

        $qb->from($this->getEntityName(), $this->getAlias());

        return $qb;
    }

    /**
     * createIndexerQueryBuilder
     *
     * @param string $alias
     */
    public function createIndexerQueryBuilder($alias) {
        $queryBuilder = parent::createQueryBuilder($alias)
            ->leftJoin($alias . '.profile', 'pro')
            ->leftJoin($alias . '.organization', 'org')
            ->addSelect('pro, org')
            ;

        return $queryBuilder;
    }

    /**
     *
     * @param User $user
     * @return int
     */
    public function getApplicationCount($user) {
        return $this->getApplicationCountByStatus($user);
    }

    /**
     *
     * @param User $user
     * @return int
     */
    public function getPendingApplicationCount($user) {
        return $this->getApplicationCountByStatus($user, Application::WAITING_ANSWER);
    }

    /**
     *
     * @param User $user
     * @return int
     */
    public function getAcceptedApplicationCount($user) {
        return $this->getApplicationCountByStatus($user, Application::POSITIVE_ANSWER);
    }

    /**
     *
     * @param User $user
     * @return int
     */
    public function getRejectedApplicationCount($user) {
        return $this->getApplicationCountByStatus($user, Application::NEGATIVE_ANSWER);
    }

    protected function getApplicationCountByStatus($user, $status = null) {
        $rsm = new ResultSetMapping();
        $rsm->addScalarResult('application_count', 'application_count');

        $sql = "SELECT count(a.id) AS application_count FROM application a WHERE user_id = :user_id";

        if($status !== null) {
            $sql .= " AND a.status = :status";
        }

        $query = $this->getEntityManager()->createNativeQuery($sql, $rsm);

        $query->setParameter('user_id', $user->getId());

        if($status !== null) {
            $query->setParameter('status', $status);
        }

        return $query->getSingleScalarResult();
    }

}
