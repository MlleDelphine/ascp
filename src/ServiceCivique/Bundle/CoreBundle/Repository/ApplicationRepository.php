<?php

namespace ServiceCivique\Bundle\CoreBundle\Repository;

use Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;
use Pagerfanta\Adapter\DoctrineORMAdapter;
use Pagerfanta\Pagerfanta;

use ServiceCivique\Bundle\CoreBundle\Entity\Profile;
use ServiceCivique\Bundle\CoreBundle\Entity\Mission;

/**
 * MissionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ApplicationRepository extends EntityRepository
{

    /**
     * create a new application from profile object
     *
     * @param  Profile     $profile
     * @return Application $application
     */
    public function createNewFromProfile(Profile $profile)
    {
        $application = $this->createNew();
        $application->setUser($profile->getUser());
        $application->setMotivation($profile->getMotivation());
        $application->setPhoneNumber($profile->getPhoneNumber());
        $application->setZipCode($profile->getZipCode());
        $application->setCountry($profile->getCountry());
        $application->setAddress($profile->getAddress());
        $application->setCity($profile->getCity());
        $application->setPath($profile->getPath());

        return $application;
    }

    /**
     * findFromNow
     */
    public function findFromNow(array $criteria, $orderBy = null)
    {
        $queryBuilder = $this->createQueryBuilder('o');
        $queryBuilder
            ->addSelect('m')
            ->innerJoin('o.mission', 'm')
            ->where('o.user = :user')
                ->setParameter('user', $criteria['user'])
            ->andWhere('o.isPreview = 0')
        ;

        if ($criteria['all'] != 'all') {
            $now = new \Datetime('-1 month');
            $queryBuilder->andWhere('o.created > :now')
                    ->setParameter('now', $now)
                ->andWhere('m.status = :mission_status')
                    ->setParameter('mission_status', Mission::STATUS_AVAILABLE)
            ;
        }
        // $queryBuilder->orderBy('o.id', 'DESC');
        $this->applySorting($queryBuilder, $orderBy);

        return $this->getPaginator($queryBuilder);
    }

    public function findByMission(array $criteria)
    {
        $queryBuilder = $this->createQueryBuilder('a')
            ->where('a.user = :user')
                ->setParameter('user', $criteria['user'])
            ->andWhere('a.mission = :mission')
                ->setParameter('mission', $criteria['mission'])
            ->andWhere('a.isPreview = 0')
        ;

        return $queryBuilder->getQuery()->getSingleResult();
    }

    public function findPreviewByMission(array $criteria)
    {
        $queryBuilder = $this->createQueryBuilder('a')
            ->where('a.user = :user')
                ->setParameter('user', $criteria['user'])
            ->andWhere('a.mission = :mission')
                ->setParameter('mission', $criteria['mission'])
            ->andWhere('a.isPreview = 1')
        ;

        return $queryBuilder->getQuery()->getOneOrNullResult();
    }

    public function findByMissionId(array $criteria = null, array $orderBy = null)
    {
        $mission = $this->getEntityManager()->getReference('ServiceCiviqueCoreBundle:Mission', $criteria['mission_id']);

        $queryBuilder = $this->createQueryBuilder('o')
            ->where('o.mission = :mission')
                ->setParameter('mission', $mission)
            ->andWhere('o.isPreview = 0')
            ->addSelect('u')
                ->innerJoin('o.user', 'u')
        ;
        $this->applySorting($queryBuilder, $orderBy);

        return $this->getPaginator($queryBuilder);
    }

    public function getPaginator(QueryBuilder $queryBuilder)
    {
        return new Pagerfanta(new DoctrineORMAdapter($queryBuilder, false));
    }

    public function getPaginatorWithJoin(QueryBuilder $queryBuilder)
    {
        return new Pagerfanta(new DoctrineORMAdapter($queryBuilder, true, null));
    }

    public function getAllCount($missionId)
    {
        return $this->createQueryBuilder('a')
                    ->select('COUNT(a)')
                    ->where('a.mission = :mission')
                        ->setParameter('mission', $missionId)
                    ->andWhere('a.isPreview = 0')
            ->getQuery()->getSingleScalarResult();
    }

    public function getAllWithCV($offset = 0, $max = 100)
    {
        $queryBuilder = $this->createQueryBuilder('a');

        $queryBuilder
            ->where('a.cv IS NOT null')
            ->andWhere('a.isPreview = 0')
            ->setMaxResults($max)
            ->setFirstResult($offset)
        ;

        return $queryBuilder
            ->getQuery()
            ->getResult()
        ;

    }

    public function getAllWithCVCount()
    {
        return $this->createQueryBuilder('a')
                    ->select('COUNT(a)')
                    ->where('a.cv IS NOT null')
                    ->andWhere('a.isPreview = 0')
            ->getQuery()->getSingleScalarResult()
        ;
    }

    public function getAllWithDuplicates($offset = 0, $max = 100)
    {
        $queryBuilder = $this->createQueryBuilder('a');

        $queryBuilder
            ->addSelect('COUNT(a.id) as cpt')
            ->where('a.isPreview = 0')
            ->groupBy('a.mission, a.user')
            ->having('cpt > 1')
            ->setMaxResults($max)
            ->setFirstResult($offset)
        ;

        return $queryBuilder
            ->getQuery()
            ->getResult()
        ;
    }

    public function getAllWithDuplicatesCount()
    {
        $queryBuilder = $this->createQueryBuilder('a');

        $queryBuilder
            ->select('COUNT(a) as cpt')
            ->where('a.isPreview = 0')
            ->groupBy('a.mission, a.user')
            ->having('cpt > 1')
        ;

        // If you know how to do this without count(), tell me...
        return count($queryBuilder
            ->getQuery()
            ->getResult())
            // ->getSingleScalarResult()
        ;
    }

    /**
     * createIndexerQueryBuilder
     *
     * @param string $alias
     */
    public function createIndexerQueryBuilder($alias) {
        $queryBuilder = parent::createQueryBuilder($alias);
        $queryBuilder->join($alias . '.mission', 'm');

        return $queryBuilder;
    }

}
